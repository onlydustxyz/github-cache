include       mime.types;
default_type  application/octet-stream;

# Caches
proxy_cache_path /var/cache/github-api levels=1:2 keys_zone=github_api_cache:10m inactive=1y;

# Replace all occurrences of "api.github.com" by "github-cache.onlydust.xyz" in Link header
map $upstream_http_link $new_link {
  "~^(.*)https:\/\/api\.github\.com(.*)https:\/\/api\.github\.com(.*)https:\/\/api\.github\.com(.*)https:\/\/api\.github\.com(.*)$"   $1$OD_GITHUBCACHE_BASE_URL$2$OD_GITHUBCACHE_BASE_URL$3$OD_GITHUBCACHE_BASE_URL$4$OD_GITHUBCACHE_BASE_URL$5;
  "~^(.*)https:\/\/api\.github\.com(.*)https:\/\/api\.github\.com(.*)https:\/\/api\.github\.com(.*)$"                                 $1$OD_GITHUBCACHE_BASE_URL$2$OD_GITHUBCACHE_BASE_URL$3$OD_GITHUBCACHE_BASE_URL$4;
  "~^(.*)https:\/\/api\.github\.com(.*)https:\/\/api\.github\.com(.*)$"                                                               $1$OD_GITHUBCACHE_BASE_URL$2$OD_GITHUBCACHE_BASE_URL$3;
  "~^(.*)https:\/\/api\.github\.com(.*)$"                                                                                             $1$OD_GITHUBCACHE_BASE_URL$2;
}

# Extract 8 first meaningful characters from the Github Token
map $http_authorization $github_token {
  default "none";
  "~^Bearer ([-_a-zA-Z0-9]{12})" $1;
}

# Upstreams
upstream github-api {
  server api.github.com:443;
}

log_format github_log_format escape=json
'{'
  '"remote_addr": "$remote_addr",'
  '"time_local": "$time_local",'
  '"request": "$request",'
  '"status": "$status",'
  '"upstream_status": "$upstream_status",'
  '"user_agent": "$http_user_agent",'
  '"X-Ratelimit-Limit": "$upstream_http_x_ratelimit_limit",'
  '"X-Ratelimit-Remaining": "$upstream_http_x_ratelimit_remaining",'
  '"X-Ratelimit-Reset": "$upstream_http_x_ratelimit_reset",'
  '"X-Ratelimit-Used": "$upstream_http_x_ratelimit_used",'
  '"X-Ratelimit-Resource": "$upstream_http_x_ratelimit_resource",'
  '"Etag": "$upstream_http_etag",'
  '"X-Github-Cache-Status": "$upstream_cache_status",'
  '"github_token_prefix": "$github_token"'
'}';

server {
  listen $PORT default_server;

  location / {
    proxy_http_version 1.1;
    proxy_pass https://github-api/;
    proxy_set_header Host api.github.com;
    proxy_set_header Authorization $http_authorization;

    access_log /dev/stdout github_log_format;

    proxy_cache github_api_cache;
    proxy_cache_valid 200 302 1m;
    proxy_cache_valid 404 30s;
    proxy_cache_bypass $http_pragma;

    # Allows to reply with an expired entry if GitHub replies with a 5xx error
    proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504;

    # Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.
    # This is probably the most import line in this configuration.
    proxy_cache_revalidate on;

    # Ensure only one request at a time will be allowed to populate a new cache element.
    # Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released.
    proxy_cache_lock on;
    proxy_cache_lock_age 10s;
    proxy_cache_lock_timeout 20s;

    # Ignore HTTP headers coming from GitHub to control the cache
    proxy_ignore_headers Expires Cache-Control Set-Cookie X-Accel-Redirect X-Accel-Expires;

    # Add cache status information in the reply
    add_header X-Github-Cache-Status $upstream_cache_status;

    # Override Link header so that we make sure pagination still targets this cache
    proxy_hide_header Link;
    add_header Link $new_link;

    # Bypass caching for /rate_limit endpoint. This doesn't decrease the rate limiting.
    location /rate_limit {
      proxy_pass https://github-api/rate_limit;
      proxy_cache_bypass 1;
      proxy_no_cache 1;
    }
  }

}
